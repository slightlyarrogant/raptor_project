API - Procedury Stanowe
Metadata

url: http://192.168.33.19/master/docs/developers/api/api-view-procedures
scraped_at: 2024-09-05T12:18:39.593789
last_updated: 2024-09-05T12:18:39.593815
parent_id: 21c021b76586e248072c806c95187f09
path: aPaczka Plugin/Dobre praktyki/Szkolenia - B2B/Zestawienie webinaria/Zestawienie eSzkolenia/Inter stal/Handel/Magazyn/Praca z czytnikiem/Rozliczenie produkcji/Ustawienia Przyjmowanie Towaru na pakowaniu/Laguna/Analizy/Okucia/Montan stal/API - Procedury Stanowe
meta_tags: ['operacji', 'może', 'przed', 'rekordu', 'funkcja', 'documentid', 'stanie', 'wykonaniu', 'klient', 'pomocą']

Content
Definiowanie procedur
TODO
Definiowanie stanów
TODO
Tworzenie widoków
TODO
Kontekst
TODO
Formularze
TODO
Przetwarzanie na bazie
W czasie wykonywania operacji na stanie może wystąpić bład zaraz po wykonaniu operacji bazodanowych, a przed zwróceniem widoku do klienta. Taka sytuacja doprowadzi do zwrócenia błędu, a klient pozostanie w stanie sprzed wykonania operacji, podczas gdy zmiany na bazie zostały już wprowadzone. Co powoduje, że klient może np. wysłać żądanie dodania rekordu więcej niż jeden raz.
Aby się przed tym zabezpieczyć operacje bazodanowe związane z danym stanem/formularzem należy opakować za pomocą funkcji:
object ExecuteFormRequest(Func<object> requestExecute)


Funkcja chroni przed podwójnym wykonaniem tej samej operacji (np. dodanie rekordu). Funkcja przekazana w parametrze requestExecute zostanie wykonana tylko raz dla danego identyfikatora. Za każdym następnym razem zwróci wynik z pierwszego wywołania. Funkcja może np. zwracać id dodanego rekordu (typ prosty lub serializowalny obiekt).

Jako unikatowy identyfikator wykorzystywana jest właściwość FormRequestId formularza. Po wykonaniu zapytania można wygenerować nowy identyfikator za pomocą funkcji RefreshFormRequestId() na formularzu (niezbędne dla formularzy aktualizujących/niejednorazowych).
Przykład
[ViewProcedureStateExport]
public class CreateDocumentViewState : ViewProcedureStateWithFormView
{
    protected override ViewProcedureActionResponse Ok()
    {
        var documentId = (int)ExecuteFormRequest(() =>
        {
            var model = new DokumentNowyDTO();
            // ...

            var record = ControllerService.GetController<ICDokumentyBazowe>().Dodaj(model);
            return record.ID;
        });

        return Redirect<DocumentViewState>(state => state.DocumentId = documentId);
    }

    // ...
}
