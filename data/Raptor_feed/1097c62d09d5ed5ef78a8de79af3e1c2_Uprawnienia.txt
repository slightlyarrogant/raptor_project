Uprawnienia
Metadata

url: http://192.168.33.19/master/docs/developers/plugins/extend-permissions
scraped_at: 2024-09-05T12:18:41.418432
last_updated: 2024-09-05T12:18:41.418462
parent_id: 21c021b76586e248072c806c95187f09
path: aPaczka Plugin/Dobre praktyki/Szkolenia - B2B/Zestawienie webinaria/Zestawienie eSzkolenia/Inter stal/Handel/Magazyn/Praca z czytnikiem/Rozliczenie produkcji/Ustawienia Przyjmowanie Towaru na pakowaniu/Laguna/Analizy/Okucia/Montan stal/Uprawnienia
meta_tags: ['context', 'string', 'public', 'key1', 'createkey', 'name', 'uprawnień', 'uprawnienia', 'należy', 'mypermissions']

Content
Dodawanie nowych uprawnień pracownika w pluginie
Aby dodać nowe uprawnienia należy stworzyć klasę implementującą PermissionContextDescriptor. W eksporcie należy podać własną nazwę grupy uprawnień np. "MyPermissions". Klasa ta zwraca informacje o nazwach uprawnień, kategoriach i wartościach domyslnych.
Przykład:
[Export("MyPermissions", typeof(PermissionContextDescriptor))]
class MyPluginPermissionsDescriptor : PermissionContextDescriptor
{
    public override string GetDisplayName(string name)
    {
        switch (name)
        {
            case "MyPermission1": return "Uprawnienie 1";
            case "MyPermission2": return "Uprawnienie 2";
            case "MyPermission3": return "Uprawnienie 3";
            default: return null;
        }
    }
    public override string GetDescription(string name) => null;
    public override string GetCategory(string name) => "Księgowość";
    public override PermissionValue GetDefaultValue(string name) => PermissionValue.None;
}

Użycie
// Stworzenie kontekstu (należy przekazać klasę biblioteki plugina oraz nazwę contextu zadeklarowaną w eksporcie).
var context = PermissionContextKey.GetContextKey(typeof(MyPluginType).Assembly, "MyPermissions");

// Pobranie klucza
var key1 = context.CreateKey("MyPermission1");

// Sprawdzenie uprawnienia
var hasPermission = key1.Has();

// Sprawdzenie uprawnienia z rzuceniem błędu
key1.AsRule().Demand();

// Sprawdzenie uprawnienia złożonego z rzuceniem błędu
var key2 = context.CreateKey("MyPermission2");
var key3 = context.CreateKey("MyPermission3");

var rule = key1.AsRule() | (key2.AsRule() & key3.AsRule());
rule.Demand();


Uwaga wersja sprawdzenia poprzez Demand() jest jedyną zalecaną, ponieważ rzuca wyjątek, który następnie jest odpowiednio przetwarzany. Aby sprawdzić uprawnienie bez rzucenia błędu należy użyć funkcji Has().

Dodawanie uprawnień do dialogu z uprawnieniami pracownika
Przykład:
[Export(typeof(ICustomPermissionsProvider))]
public class MyPluginCustomPermissionsProvider : ICustomPermissionsProvider
{
    public void Fill(IPermissionsContextModel model)
    {
        var context = PermissionContextKey.GetContextKey(GetType().Assembly, "MyPermissions");
        var key1 = context.CreateKey("MyPermission1");
        var key2 = context.CreateKey("MyPermission2");
        var key3 = context.CreateKey("MyPermission3");

        var group = model.GetOrAddGroup("Księgowość").GetOrAddGroup("Mój plugin");
        group.AddEntry(key1);
        group.AddEntry(key2);
        group.AddEntry(key3);
    }
}
